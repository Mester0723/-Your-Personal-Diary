import telebot
import datetime
from logic import DB_Manager
from config import API_TOKEN

TOKEN = API_TOKEN
bot = telebot.TeleBot(TOKEN)
manager = DB_Manager()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.chat.id
    manager.add_user(user_id, message.from_user.username)
    bot.reply_to(message, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø - *–ë–æ—Ç-–µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫!*\n\n"
                          "‚úèÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
                          "/add - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
                          "/list - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏\n"
                          "/done - –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π\n"
                          "/delete - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n\n"
                          "üìÉ –î–ª—è –±–æ–ª—å—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö –≤–≤–µ–¥–∏: /help")
    
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–º–æ—â–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
@bot.message_handler(commands=['help'])
def handle_help(message):
    help_text = (
        "üìö *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:*\n\n"
        "1. /add –ó–∞–≥–æ–ª–æ–≤–æ–∫; –û–ø–∏—Å–∞–Ω–∏–µ; –ì–ì–ì–ì-–ú–ú-–î–î; –ß–ß:–ú–ú; –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç\n"
        "   - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É.\n"
        "   - –ü—Ä–∏–º–µ—Ä: /add –ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã; –ú–æ–ª–æ–∫–æ, —Ö–ª–µ–±; 2025-08-24; 18:30; –í—ã—Å–æ–∫–∏–π\n\n"
        "2. /list\n"
        "   - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏.\n\n"
        "3. /done ID_–∑–∞–¥–∞—á–∏ [ID_–∑–∞–¥–∞—á–∏ ...]\n"
        "   - –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É(-–∏) –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é(-—ã–µ).\n"
        "   - –ü—Ä–∏–º–µ—Ä: /done 1 –∏–ª–∏ /done 1 2\n\n"
        "4. /delete ID_–∑–∞–¥–∞—á–∏ [ID_–∑–∞–¥–∞—á–∏ ...]\n"
        "   - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É(-–∏).\n"
        "   - –ü—Ä–∏–º–µ—Ä: /delete 1 –∏–ª–∏ /delete 1 2\n\n"
        "‚ö†Ô∏è *–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏:* –ì–ì–ì–ì-–ú–ú-–î–î –¥–ª—è –¥–∞—Ç—ã –∏ –ß–ß:–ú–ú –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏.\n"
        "‚ö†Ô∏è *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:* üü¢ –ù–∏–∑–∫–∏–π, üü° –°—Ä–µ–¥–Ω–∏–π, üî¥ –í—ã—Å–æ–∫–∏–π.\n\n"
        "‚ÅâÔ∏è –ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –æ–±—Ä–∞—â–∞—Ç—å—Å—è!"
    )
    bot.reply_to(message, help_text, parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@bot.message_handler(commands=['add'])
def handle_add(message):
    try:
        text = message.text[len("/add"):].strip()
        parts = text.split(";")

        if len(parts) != 5:
            bot.reply_to(
                message,
                "‚ö†Ô∏è –û—à–∏–±–∫–∞!\n\n"
                "üíø –§–æ—Ä–º–∞—Ç: /add –ó–∞–≥–æ–ª–æ–≤–æ–∫; –û–ø–∏—Å–∞–Ω–∏–µ; –ì–ì–ì–ì-–ú–ú-–î–î; –ß–ß:–ú–ú; –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç\n"
                "üìÄ –ü—Ä–∏–º–µ—Ä: /add –ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã; –ú–æ–ª–æ–∫–æ, —Ö–ª–µ–±; 2025-08-24; 18:30; –í—ã—Å–æ–∫–∏–π\n\n"
                "üìÉ –î–ª—è –±–æ–ª—å—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö –≤–≤–µ–¥–∏: /help"
            )
            return

        title, desc, date_str, time_str, priority = [p.strip() for p in parts]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã
        try:
            datetime.datetime.strptime(date_str, "%Y-%m-%d")
        except ValueError:
            bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞!\n"
                                  "üìÖ –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-08-24).\n\n"
                                  "üìÉ –î–ª—è –±–æ–ª—å—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö –≤–≤–µ–¥–∏: /help")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
        try:
            datetime.datetime.strptime(time_str, "%H:%M")
        except ValueError:
            bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞!\n"
                                  "‚åö –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:30).\n\n"
                                  "üìÉ –î–ª—è –±–æ–ª—å—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö –≤–≤–µ–¥–∏: /help")
            return

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        priority_map = {
            "–Ω–∏–∑–∫–∏–π": "low",
            "üü¢ –Ω–∏–∑–∫–∏–π": "low",
            "—Å—Ä–µ–¥–Ω–∏–π": "medium",
            "üü° —Å—Ä–µ–¥–Ω–∏–π": "medium",
            "–≤—ã—Å–æ–∫–∏–π": "high",
            "üî¥ –≤—ã—Å–æ–∫–∏–π": "high"
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        priority_key = priority.lower()
        if priority_key not in priority_map:
            bot.reply_to(
                message,
                "‚ö†Ô∏è –û—à–∏–±–∫–∞!\n"
                "‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω –∏–∑: üü¢ –ù–∏–∑–∫–∏–π / üü° –°—Ä–µ–¥–Ω–∏–π / üî¥ –í—ã—Å–æ–∫–∏–π\n\n"
                "üìÉ –î–ª—è –±–æ–ª—å—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö –≤–≤–µ–¥–∏: /help"
            )
            return

        priority_db = priority_map[priority_key]

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        manager.add_task(message.chat.id, title, desc, date_str, time_str, priority_db)

        # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        priority_display = {
            "low": "üü¢ –ù–∏–∑–∫–∏–π",
            "medium": "üü° –°—Ä–µ–¥–Ω–∏–π",
            "high": "üî¥ –í—ã—Å–æ–∫–∏–π"
        }[priority_db]

        bot.reply_to(message, f"‚úÖ –ó–∞–¥–∞—á–∞ '{title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º {priority_display}!")

    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ```{e}```\n", parse_mode="Markdown"
                               "üìÉ –î–ª—è –±–æ–ª—å—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö –≤–≤–µ–¥–∏: /help")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
@bot.message_handler(commands=['list'])
def handle_list(message):
    tasks = manager.list_tasks(message.chat.id)
    if not tasks:
        bot.reply_to(message, "üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á")
        return

    text = "üìå –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n\n"
    for t in tasks:
        task_id, title, due_date, due_time, status = t
        status_icon = "‚úÖ" if status == "done" else "‚åõ"
        text += f"{status_icon} #{task_id} {title} ‚è∞ {due_date} {due_time}\n"
    bot.reply_to(message, text)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
@bot.message_handler(commands=['done'])
def handle_done(message):
    try:
        args = message.text.split()[1:]
        if not args:
            bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏ ID –∑–∞–¥–∞—á(-–∏), –∫–æ—Ç–æ—Ä—ã–µ(-—É—é) –Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å. –ü—Ä–∏–º–µ—Ä: /done 1 –∏–ª–∏ /done 1 2\n", parse_mode="Markdown"
                                  "üìÉ –î–ª—è –±–æ–ª—å—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö –≤–≤–µ–¥–∏: /help")
            return

        task_ids = [int(x) for x in args]
        updated = manager.mark_done(message.chat.id, task_ids)

        if updated > 0:
            bot.reply_to(message, f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ(-–∞) –∑–∞–¥–∞—á(-–∞): {updated}")
        else:
            bot.reply_to(message, "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–∞–∫–∏—Ö(-–æ–π) –∑–∞–¥–∞—á(-–∏).\n"
                                  "üìÉ –î–ª—è –±–æ–ª—å—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö –≤–≤–µ–¥–∏: /help")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ```{e}```\n", parse_mode="Markdown"
                               "üìÉ –î–ª—è –±–æ–ª—å—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö –≤–≤–µ–¥–∏: /help")

@bot.message_handler(commands=['delete'])
def handle_delete(message):
    try:
        args = message.text.split()[1:]
        if not args:
            bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏ ID –∑–∞–¥–∞—á(-–∏) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /delete 1 –∏–ª–∏ /delete 1 2\n", parse_mode="Markdown"
                                  "üìÉ –î–ª—è –±–æ–ª—å—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö –≤–≤–µ–¥–∏: /help")
            return

        task_ids = [int(x) for x in args]
        deleted = manager.delete_task(message.chat.id, task_ids)

        if deleted > 0:
            bot.reply_to(message, f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ(-–∞) –∑–∞–¥–∞—á(-–∞): {deleted}")
        else:
            bot.reply_to(message, "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–∞–∫–∏—Ö(-–æ–π) –∑–∞–¥–∞—á(-–∏).\n"
                                  "üìÉ –î–ª—è –±–æ–ª—å—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö –≤–≤–µ–¥–∏: /help")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ```{e}```\n", parse_mode="Markdown"
                               "üìÉ –î–ª—è –±–æ–ª—å—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö –≤–≤–µ–¥–∏: /help")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.infinity_polling()